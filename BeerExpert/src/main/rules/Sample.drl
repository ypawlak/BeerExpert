package com.beerExpert
 
import com.beerExpert.BeerExpertMain;
import com.beerExpert.Question;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import gui.GuiApp;
 
rule "Initialize"
	when
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.InitQuestion;
		
		UserTaste utBeer = new UserTaste();
		utBeer.Desire = MainConsts.WantsBeer;
        question.Answers.put(MainConsts.YesAns, utBeer);
        UserTaste utNoBeer = new UserTaste();
        utNoBeer.Desire = MainConsts.WantsNoBeer;
        question.Answers.put(MainConsts.NoAns, utNoBeer);
        
        BeerExpertMain.ActiveQuestion = question;
        System.out.println("Executed: Initialize");
end

rule "Idiot"
	when
		taste: UserTaste (Desire == MainConsts.WantsNoBeer)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.IdiotQuestion;
		
		UserTaste utBeer = taste.Populate();
		utBeer.Desire = MainConsts.WantsBeer;
		question.Answers.put(MainConsts.ReflectionAns, utBeer);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: Idiot");
end

rule "Overture"
	when
		taste: UserTaste (Desire == MainConsts.WantsBeer, KnownFlavorRelevancy == false)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.OvertureQuestion;
		
		UserTaste peasant = taste.Populate();
		peasant.FlavorRelevancy = MainConsts.Peasant;
		peasant.KnownFlavorRelevancy = true;
		UserTaste fussy = taste.Populate();
		fussy.FlavorRelevancy = MainConsts.Fussy;
		fussy.KnownFlavorRelevancy = true;
		question.Answers.put(MainConsts.YesAns, peasant);
		question.Answers.put(MainConsts.NoAns, fussy);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: Overture");
end

rule "CorpoBeer"
	when 
		UserTaste (FlavorRelevancy == MainConsts.Peasant)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Eurolager;
		answer.SetImage(MainConsts.EurolagerImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: CorpoBeer");
end

rule "AskLocation"
	when 
		UserTaste (FlavorRelevancy == MainConsts.Fussy, Flavor == null, Aroma == null, HopBeer == null, Coffee == null, Bitters == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.LocationQuestion;
		
		Circumstances freshAir = new Circumstances();
		freshAir.Location = MainConsts.FreshAir;
		Circumstances closedRoom = new Circumstances();
		closedRoom.Location = MainConsts.ClosedRoom;
		question.Answers.put(MainConsts.YesAns, freshAir);
		question.Answers.put(MainConsts.NoAns, closedRoom);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskLocation");
end

rule "AskWeather"
	when 
		circumstances: Circumstances (Location == MainConsts.FreshAir, Weather == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.WeatherQuestion;
		
		Circumstances hot = circumstances.Populate();
		hot.Weather = MainConsts.Hot;
		Circumstances cold = circumstances.Populate();
		cold.Weather = MainConsts.Cold;
		question.Answers.put(MainConsts.YesAns, hot);
		question.Answers.put(MainConsts.NoAns, cold);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskWeather");
end

rule "AskFlavour"
	when 
		Circumstances (Weather == MainConsts.Hot)
		taste: UserTaste(KnownFlavorRelevancy == true, Flavor == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.FlavourQuestion;
		
		UserTaste soft = taste.Populate();
		soft.Flavor = MainConsts.Soft;
		UserTaste oryginal = taste.Populate();
		oryginal.Flavor = MainConsts.Oryginal;
		question.Answers.put(MainConsts.SoftAns, soft);
		question.Answers.put(MainConsts.OryginalAns, oryginal);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskFlavour");
end

rule "AskGentainHop"
	when
		taste: UserTaste (Flavor == MainConsts.Soft, Hop == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.GentainHopQuestion;
		
		UserTaste gentain = taste.Populate();
		gentain.Hop = MainConsts.Gentain;
		UserTaste noGentain = taste.Populate();
		noGentain.Hop = MainConsts.NoGentain;
		question.Answers.put(MainConsts.YesAns, gentain);
		question.Answers.put(MainConsts.NoAns, noGentain);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskGentainHop");
end

rule "AskMovement"
	when
		circumstances: Circumstances (Weather == MainConsts.Cold, Movement == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.MovementQuestion;
		
		Circumstances moving = circumstances.Populate();
		moving.Movement = MainConsts.Moving;
		Circumstances steady = circumstances.Populate();
		steady.Movement = MainConsts.Steady;
		question.Answers.put(MainConsts.YesAns, moving);
		question.Answers.put(MainConsts.NoAns, steady);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskMovement");
end

rule "AskChallenges"
	when
		Circumstances (Movement == MainConsts.Steady)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.ChallengesQuestion;
		
		UserAttitude challenge = new UserAttitude();
		challenge.Requirements = MainConsts.Challenge;
		UserAttitude stable = new UserAttitude();
		stable.Requirements = MainConsts.Stable;
		question.Answers.put(MainConsts.YesAns, challenge);
		question.Answers.put(MainConsts.NoAns, stable);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskChallenges");
end

rule "AskEating"
	when
		circumnstances: Circumstances (Movement == MainConsts.Moving, Destination == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.EatingQuestion;
		
		Circumstances eating = circumnstances.Populate();
		eating.Destination = MainConsts.Eating;
		Circumstances drinking = circumnstances.Populate();
		drinking.Destination = MainConsts.JustDrinking;
		question.Answers.put(MainConsts.YesAns, eating);
		question.Answers.put(MainConsts.NoAns, drinking);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskEating");
end

rule "AskFoodKind"
	when
		Circumstances (Destination == MainConsts.Eating)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.FoodKindQuestion;
		
		Food snack = new Food();
		snack.Kind = MainConsts.Snack;
		Food dish = new Food();
		dish.Kind = MainConsts.Dish;
		question.Answers.put(MainConsts.SnackAns, snack);
		question.Answers.put(MainConsts.DishAns, dish);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskFoodKind");
end

rule "AskDishType"
	when
		food: Food (Kind == MainConsts.Dish, DishType == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.DishTypeQuestion;
		
		Food mainCourse = food.Populate();
		mainCourse.DishType = MainConsts.MainCourse;
		Food dessert = food.Populate();
		dessert.DishType = MainConsts.Dessert;
		question.Answers.put(MainConsts.MainCourseAns, mainCourse);
		question.Answers.put(MainConsts.DessertAns, dessert);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskDishType");
end

rule "AskAroma"
	when
		Food (DishType == MainConsts.MainCourse)
		taste: UserTaste (Aroma == null, FlavorRelevancy == MainConsts.Fussy)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.AromaQuestion;
		
		UserTaste fruit = taste.Populate();
		fruit.Aroma = MainConsts.Fruit;
		UserTaste chocolate = taste.Populate();
		chocolate.Aroma = MainConsts.Chocolate;
		question.Answers.put(MainConsts.FruitAns, fruit);
		question.Answers.put(MainConsts.ChocolateAns, chocolate);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskAroma");
end

rule "AskHopBeer"
	when
		(Circumstances (Destination == MainConsts.JustDrinking)
		and
		taste: UserTaste(FlavorRelevancy == MainConsts.Fussy, HopBeer == null))
		or
		taste: UserTaste (Sour == MainConsts.No, HopBeer == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.HopBeerQuestion;
		
		UserTaste hopBeer = taste.Populate();
		hopBeer.HopBeer = MainConsts.Yes;
		UserTaste noHopBeer = taste.Populate();
		noHopBeer.HopBeer = MainConsts.No;
		question.Answers.put(MainConsts.YesAns, hopBeer);
		question.Answers.put(MainConsts.NoAns, noHopBeer);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskHopBeer");
end

rule "AskWinter"
	when 
		circumstances: Circumstances (Location == MainConsts.ClosedRoom, SituationOutside == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.WinterQuestion;
		
		Circumstances winterNight = circumstances.Populate();
		winterNight.SituationOutside = MainConsts.WinterNight;
		Circumstances noWinterNight = circumstances.Populate();
		noWinterNight.SituationOutside = MainConsts.NoWinterNight;
		question.Answers.put(MainConsts.YesAns, winterNight);
		question.Answers.put(MainConsts.NoAns, noWinterNight);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskWinter");
end

rule "AskStrength"
	when 
		Circumstances (SituationOutside == MainConsts.WinterNight)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.StrengthQuestion;
		
		UserAttitude strong = new UserAttitude();
		strong.Strength = MainConsts.Strong;
		UserAttitude weak = new UserAttitude();
		weak.Strength = MainConsts.Weak;
		question.Answers.put(MainConsts.YesAns, strong);
		question.Answers.put(MainConsts.NoAns, weak);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskStrength");
end

rule "AskCoffee"
	when 
		UserAttitude(Strength == MainConsts.Strong);
		taste: UserTaste(FlavorRelevancy == MainConsts.Fussy, Coffee == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.CofeeQuestion;
		
		UserTaste coffee = taste.Populate();
		coffee.Coffee = MainConsts.Yes;
		UserTaste noCoffee = taste.Populate();
		noCoffee.Coffee = MainConsts.No;
		question.Answers.put(MainConsts.YesAns, coffee);
		question.Answers.put(MainConsts.NoAns, noCoffee);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskCoffee");
end

rule "AskBitters"
	when 
		Circumstances (SituationOutside == MainConsts.NoWinterNight)
		taste: UserTaste (FlavorRelevancy == MainConsts.Fussy, Bitters == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.BittersQuestion;
		
		UserTaste bitters = taste.Populate();
		bitters.Bitters = MainConsts.Yes;
		UserTaste noBitters = taste.Populate();
		noBitters.Bitters = MainConsts.No;
		question.Answers.put(MainConsts.YesAns, bitters);
		question.Answers.put(MainConsts.NoAns, noBitters);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskBitters");
end

rule "AskSour"
	when 
		taste: UserTaste (FlavorRelevancy == MainConsts.Fussy, Bitters == MainConsts.No, Sour == null)
	then
		Question question = new Question();
		question.QuestionTxt = MainConsts.SourQuestion;
		
		UserTaste sour = taste.Populate();
		sour.Sour = MainConsts.Yes;
		UserTaste noSour = taste.Populate();
		noSour.Sour = MainConsts.No;
		question.Answers.put(MainConsts.YesAns, sour);
		question.Answers.put(MainConsts.NoAns, noSour);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskSour");
end

rule "GentainHop"
	when 
		UserTaste (Hop == MainConsts.Gentain)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Pilzner;
		answer.SetImage(MainConsts.PilznerImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: GentainHop");
end

rule "NoChallenges"
	when 
		UserAttitude (Requirements == MainConsts.Stable)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Pilzner;
		answer.SetImage(MainConsts.PilznerImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoChallenges");
end

rule "NoGentainHop"
	when 
		UserTaste (Hop == MainConsts.NoGentain)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Wheat;
		answer.SetImage(MainConsts.WheatImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoGentainHop");
end

rule "EatsSnacks"
	when 
		Food (Kind == MainConsts.Snack)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Wheat;
		answer.SetImage(MainConsts.WheatImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: EatsSnacks");
end

rule "OryginalTaste"
	when 
		UserTaste (Flavor == MainConsts.Oryginal)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Farmhouse;
		answer.SetImage(MainConsts.FarmhouseImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: OryginalTaste");
end

rule "DrinkingNoHop"
	when 
		UserTaste (HopBeer == MainConsts.No)
		Circumstances (Destination == MainConsts.JustDrinking)
		
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Farmhouse;
		answer.SetImage(MainConsts.FarmhouseImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: DrinkingNoHop");
end

rule "Challenges"
	when 
		UserAttitude (Requirements == MainConsts.Challenge)	
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Farmhouse;
		answer.SetImage(MainConsts.FarmhouseImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Challenges");
end

rule "Chocolate"
	when 
		UserTaste (Aroma == MainConsts.Chocolate)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Porter;
		answer.SetImage(MainConsts.PorterImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Chocolate");
end

rule "Weak"
	when 
		UserAttitude (Strength == MainConsts.Weak)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Porter;
		answer.SetImage(MainConsts.PorterImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Strong");
end

rule "NoSourNoHop"
	when 
		UserTaste (Sour == MainConsts.No, HopBeer == MainConsts.No)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Porter;
		answer.SetImage(MainConsts.PorterImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoSourNoHop");
end

rule "NoSourHop"
	when 
		UserTaste (Sour == MainConsts.No, HopBeer == MainConsts.Yes)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.PaleAle;
		answer.SetImage(MainConsts.PaleAleImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoSourHop");
end

rule "DrinkingHop"
	when 
		UserTaste (HopBeer == MainConsts.Yes)
		Circumstances (Destination == MainConsts.JustDrinking)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.PaleAle;
		answer.SetImage(MainConsts.PaleAleImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: DrinkingHop");
end

rule "Bitters"
	when 
		UserTaste (Bitters == MainConsts.Yes)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.IPA;
		answer.SetImage(MainConsts.IPAImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Bitters");
end

rule "Fruit"
	when 
		UserTaste (Aroma == MainConsts.Fruit)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.IPA;
		answer.SetImage(MainConsts.IPAImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Fruit");
end

rule "Coffee"
	when 
		UserTaste (Coffee == MainConsts.Yes)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.RussianStout;
		answer.SetImage(MainConsts.RussianImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Coffee");
end

rule "Sour"
	when 
		UserTaste (Sour == MainConsts.Yes)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Sour;
		answer.SetImage(MainConsts.SourImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Sour");
end

rule "Dessert"
	when 
		Food (DishType == MainConsts.Dessert)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.Sour;
		answer.SetImage(MainConsts.SourImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Dessert");
end

rule "NoCoffee"
	when 
		UserTaste (Coffee == MainConsts.No)
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + MainConsts.BarleyWine;
		answer.SetImage(MainConsts.BarleyWineImg);
		
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoCoffee");
end