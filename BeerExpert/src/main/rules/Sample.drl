package com.beerExpert
 
import com.beerExpert.BeerExpertMain;
import com.beerExpert.Question;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import gui.GuiApp;
 
rule "Initialize"
	when
	then
		Question question = new Question();
		question.QuestionTxt = "Czy chcesz wypiæ piwo?";
		UserTaste utBeer = new UserTaste();
		utBeer.Desire = "Beer";
        question.Answers.put("Tak", utBeer);
        UserTaste utNoBeer = new UserTaste();
        utNoBeer.Desire = "No Beer";
        question.Answers.put("Nie", utNoBeer);
        BeerExpertMain.ActiveQuestion = question;
        System.out.println("Executed: Initialize");
end

rule "Idiot"
	when
		UserTaste (Desire == "No Beer")
	then
		Question question = new Question();
		question.QuestionTxt = "Idiota";
		question.Answers.put("OK", null);
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: Idiot");
end

rule "Overture"
	when
		taste: UserTaste (Desire == "Beer", KnownFlavorRelevancy == false)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy smak piwa jest Ci obojêtny?";
		
		UserTaste peasant = taste.Populate();
		peasant.FlavorRelevancy = "peasant";
		peasant.KnownFlavorRelevancy = true;
		UserTaste fussy = taste.Populate();
		fussy.FlavorRelevancy = "fussy";
		fussy.KnownFlavorRelevancy = true;
		question.Answers.put("Tak", peasant);
		question.Answers.put("Nie", fussy);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: Overture");
end

rule "CorpoBeer"
	when 
		UserTaste (FlavorRelevancy == "peasant")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Eurolager";
		answer.SetImage("Eurolager.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: CorpoBeer");
end

rule "AskLocation"
	when 
		UserTaste (FlavorRelevancy == "fussy", Flavor == null, Aroma == null, HopBeer == null, Coffee == null, Bitters == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy chcesz napiæ siê na œwie¿ym powietrzu?";
		
		Circumstances freshAir = new Circumstances();
		freshAir.Location = "Fresh air";
		Circumstances closedRoom = new Circumstances();
		closedRoom.Location = "Closed room";
		question.Answers.put("Tak", freshAir);
		question.Answers.put("Nie", closedRoom);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskLocation");
end

rule "AskWeather"
	when 
		circumstances: Circumstances (Location == "Fresh air", Weather == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy jest gor¹co?";
		
		Circumstances hot = circumstances.Populate();
		hot.Weather = "Hot";
		Circumstances cold = circumstances.Populate();
		cold.Weather = "Cold";
		question.Answers.put("Tak", hot);
		question.Answers.put("Nie", cold);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskWeather");
end

rule "AskFlavour"
	when 
		Circumstances (Weather =="Hot")
		taste: UserTaste(KnownFlavorRelevancy == true, Flavor == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Jakiego smaku szukasz?";
		
		UserTaste soft = taste.Populate();
		soft.Flavor = "Soft";
		UserTaste oryginal = taste.Populate();
		oryginal.Flavor = "Oryginal";
		question.Answers.put("Delikatnego", soft);
		question.Answers.put("Oryginalnego", oryginal);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskFlavour");
end

rule "AskGentainHop"
	when
		taste: UserTaste (Flavor == "Soft", Hop == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy lubisz goryczkowy smak chmielu?";
		
		UserTaste gentain = taste.Populate();
		gentain.Hop = "Gentain";
		UserTaste noGentain = taste.Populate();
		noGentain.Hop = "No gentain";
		question.Answers.put("Tak", gentain);
		question.Answers.put("Nie", noGentain);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskGentainHop");
end

rule "AskMovement"
	when
		circumstances: Circumstances (Weather =="Cold", Movement == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy jesteœ w aktywnym ruchu?";
		
		Circumstances moving = circumstances.Populate();
		moving.Movement = "Moving";
		Circumstances steady = circumstances.Populate();
		steady.Movement = "Steady";
		question.Answers.put("Tak", moving);
		question.Answers.put("Nie", steady);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskMovement");
end

rule "AskChallenges"
	when
		Circumstances (Movement == "Steady")
	then
		Question question = new Question();
		question.QuestionTxt = "Czy lubisz wyzwania?";
		
		UserAttitude challenge = new UserAttitude();
		challenge.Requirements = "Challenge";
		UserAttitude stable = new UserAttitude();
		stable.Requirements = "Stable";
		question.Answers.put("Tak", challenge);
		question.Answers.put("Nie", stable);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskChallenges");
end

rule "AskEating"
	when
		circumnstances: Circumstances (Movement == "Moving", Destination == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy coœ jesz?";
		
		Circumstances eating = circumnstances.Populate();
		eating.Destination = "Eating";
		Circumstances drinking = circumnstances.Populate();
		drinking.Destination = "Just drinking";
		question.Answers.put("Tak", eating);
		question.Answers.put("Nie", drinking);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskEating");
end

rule "AskFoodKind"
	when
		Circumstances (Destination == "Eating")
	then
		Question question = new Question();
		question.QuestionTxt = "Co jesz?";
		
		Food snack = new Food();
		snack.Kind = "Snack";
		Food dish = new Food();
		dish.Kind = "Dish";
		question.Answers.put("Lekk¹ przek¹skê", snack);
		question.Answers.put("Coœ ciê¿szego", dish);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskFoodKind");
end

rule "AskDishType"
	when
		food: Food (Kind == "Dish", DishType == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Danie g³ówne, czy deser?";
		
		Food mainCourse = food.Populate();
		mainCourse.DishType = "Main course";
		Food dessert = food.Populate();
		dessert.DishType = "Dessert";
		question.Answers.put("Danie g³ówne", mainCourse);
		question.Answers.put("Deser", dessert);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskDishType");
end

rule "AskAroma"
	when
		Food (DishType == "Main course")
		taste: UserTaste (Aroma == null, FlavorRelevancy == "fussy")
	then
		Question question = new Question();
		question.QuestionTxt = "Które aromaty preferujesz?";
		
		UserTaste fruit = taste.Populate();
		fruit.Aroma = "Fruit";
		UserTaste chocolate = taste.Populate();
		chocolate.Aroma = "Chocolate";
		question.Answers.put("Owocowe i ¿ywiczne", fruit);
		question.Answers.put("Czekoladowe i palone", chocolate);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskAroma");
end

rule "AskHopBeer"
	when
		(Circumstances (Destination == "Just drinking")
		and
		taste: UserTaste(FlavorRelevancy == "fussy", HopBeer == null))
		or
		taste: UserTaste (Sour == "No", HopBeer == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy lubisz chmielowe piwa?";
		
		UserTaste hopBeer = taste.Populate();
		hopBeer.HopBeer = "Yes";
		UserTaste noHopBeer = taste.Populate();
		noHopBeer.HopBeer = "No";
		question.Answers.put("Tak", hopBeer);
		question.Answers.put("Nie", noHopBeer);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskHopBeer");
end

rule "AskWinter"
	when 
		circumstances: Circumstances (Location == "Closed room", SituationOutside == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy jest ch³odna zimowa noc?";
		
		Circumstances winterNight = circumstances.Populate();
		winterNight.SituationOutside = "Winter night";
		Circumstances noWinterNight = circumstances.Populate();
		noWinterNight.SituationOutside = "No winter night";
		question.Answers.put("Tak", winterNight);
		question.Answers.put("Nie", noWinterNight);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskWinter");
end

rule "AskStrength"
	when 
		Circumstances (SituationOutside == "Winter night")
	then
		Question question = new Question();
		question.QuestionTxt = "Czy piwo ma lekko uderzyc do g³owy?";
		
		UserAttitude strong = new UserAttitude();
		strong.Strength = "Strong";
		UserAttitude weak = new UserAttitude();
		weak.Strength = "Weak";
		question.Answers.put("Tak", strong);
		question.Answers.put("Nie", weak);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskStrength");
end

rule "AskCoffee"
	when 
		UserAttitude(Strength == "Strong");
		taste: UserTaste(FlavorRelevancy == "fussy", Coffee == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy lubisz palon¹ kawê?";
		
		UserTaste coffee = taste.Populate();
		coffee.Coffee = "Yes";
		UserTaste noCoffee = taste.Populate();
		noCoffee.Coffee = "No";
		question.Answers.put("Tak", coffee);
		question.Answers.put("Nie", noCoffee);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskCoffee");
end

rule "AskBitters"
	when 
		Circumstances (SituationOutside == "No winter night")
		taste: UserTaste (FlavorRelevancy == "fussy", Bitters == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy chcesz coœ goryczkowego?";
		
		UserTaste bitters = taste.Populate();
		bitters.Bitters = "Yes";
		UserTaste noBitters = taste.Populate();
		noBitters.Bitters = "No";
		question.Answers.put("Tak", bitters);
		question.Answers.put("Nie", noBitters);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskBitters");
end

rule "AskSour"
	when 
		taste: UserTaste (FlavorRelevancy == "fussy", Bitters == "No", Sour == null)
	then
		Question question = new Question();
		question.QuestionTxt = "Czy lubisz kwaœne cukierki?";
		
		UserTaste sour = taste.Populate();
		sour.Sour = "Yes";
		UserTaste noSour = taste.Populate();
		noSour.Sour = "No";
		question.Answers.put("Tak", sour);
		question.Answers.put("Nie", noSour);
		
		BeerExpertMain.ActiveQuestion = question;
		System.out.println("Executed: AskSour");
end

rule "GentainHop"
	when 
		UserTaste (Hop == "Gentain")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Pilzner";
		answer.SetImage("Pilzner.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: GentainHop");
end

rule "NoChallenges"
	when 
		UserAttitude (Requirements == "Stable")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Pilzner";
		answer.SetImage("Pilzner.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoChallenges");
end

rule "NoGentainHop"
	when 
		UserTaste (Hop == "No gentain")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Piwo pszeniczne";
		answer.SetImage("Pszeniczne.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoGentainHop");
end

rule "EatsSnacks"
	when 
		Food (Kind == "Snack")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Piwo pszeniczne";
		answer.SetImage("Pszeniczne.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: EatsSnacks");
end

rule "OryginalTaste"
	when 
		UserTaste (Flavor == "Oryginal")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Farmhouse / Saison";
		answer.SetImage("Farmhouse.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: OryginalTaste");
end

rule "DrinkingNoHop"
	when 
		UserTaste (HopBeer == "No")
		Circumstances (Destination == "Just drinking")
		
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Farmhouse / Saison";
		answer.SetImage("Farmhouse.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: DrinkingNoHop");
end

rule "Challenges"
	when 
		UserAttitude (Requirements == "Challenge")	
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Farmhouse / Saison";
		answer.SetImage("Farmhouse.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Challenges");
end

rule "Chocolate"
	when 
		UserTaste (Aroma == "Chocolate")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Porter lub Stout";
		answer.SetImage("Porter.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Chocolate");
end

rule "Weak"
	when 
		UserAttitude (Strength == "Weak")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Porter lub Stout";
		answer.SetImage("Porter.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Strong");
end

rule "NoSourNoHop"
	when 
		UserTaste (Sour == "No", HopBeer == "No")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Porter lub Stout";
		answer.SetImage("Porter.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoSourNoHop");
end

rule "NoSourHop"
	when 
		UserTaste (Sour == "No", HopBeer == "Yes")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Pale Ale";
		answer.SetImage("PaleAle.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoSourHop");
end

rule "DrinkingHop"
	when 
		UserTaste (HopBeer == "Yes")
		Circumstances (Destination == "Just drinking")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Pale Ale";
		answer.SetImage("PaleAle.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: DrinkingHop");
end

rule "Bitters"
	when 
		UserTaste (Bitters == "Yes")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "IPA";
		answer.SetImage("IPA.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Bitters");
end

rule "Fruit"
	when 
		UserTaste (Aroma == "Fruit")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "IPA";
		answer.SetImage("IPA.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Fruit");
end

rule "Coffee"
	when 
		UserTaste (Coffee == "Yes")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Rosyjski Imperialny Stout";
		answer.SetImage("Russian.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Coffee");
end

rule "Sour"
	when 
		UserTaste (Sour == "Yes")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Sour";
		answer.SetImage("Sour.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Sour");
end

rule "Dessert"
	when 
		Food (DishType == "Dessert")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Sour";
		answer.SetImage("Sour.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: Dessert");
end

rule "NoCoffee"
	when 
		UserTaste (Coffee == "No")
	then
		Answer answer = new Answer();
		answer.AnswerTxt = MainConsts.ChosenBeer + "Barley Wine";
		answer.SetImage("Barley.jpg");
		BeerExpertMain.SelectedAnswer = answer;
		System.out.println("Executed: NoCoffee");
end